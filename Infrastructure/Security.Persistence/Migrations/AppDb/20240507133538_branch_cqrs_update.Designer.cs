// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Security.Persistence.Context;

#nullable disable

namespace Security.Persistence.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240507133538_branch_cqrs_update")]
    partial class branch_cqrs_update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PersonelUnit", b =>
                {
                    b.Property<int>("PersonelsId")
                        .HasColumnType("int");

                    b.Property<int>("unitsId")
                        .HasColumnType("int");

                    b.HasKey("PersonelsId", "unitsId");

                    b.HasIndex("unitsId");

                    b.ToTable("PersonelUnit");
                });

            modelBuilder.Entity("Security.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BranchName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchName = "İdari Mali İşler Şube Müdürlüğü",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            BranchName = "Destek Hizmetleri Şube Müdürlüğü",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            BranchName = "Personel Şube Müdürlüğü",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            BranchName = "Eğitim Şube Müdürlüğü",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            BranchName = "Öğrenci İşleri Şube Müdürlüğü",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            BranchName = "Pomem Şube Müdürlüğü",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Security.Domain.Entities.BranchAndUnitRelationShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("PersonelId");

                    b.HasIndex("UnitId");

                    b.ToTable("BranchAndUnitRelationShips");
                });

            modelBuilder.Entity("Security.Domain.Entities.CarPlate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonel")
                        .HasColumnType("bit");

                    b.Property<string>("PlateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarPlates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 408, DateTimeKind.Local).AddTicks(2995),
                            IsDeleted = false,
                            IsPersonel = true,
                            PlateName = "69 AAA 13"
                        },
                        new
                        {
                            Id = 2,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 408, DateTimeKind.Local).AddTicks(3014),
                            IsDeleted = false,
                            IsPersonel = false,
                            PlateName = "69 AB 25"
                        },
                        new
                        {
                            Id = 3,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 408, DateTimeKind.Local).AddTicks(3015),
                            IsDeleted = false,
                            IsPersonel = true,
                            PlateName = "25 ACH 361"
                        },
                        new
                        {
                            Id = 4,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 408, DateTimeKind.Local).AddTicks(3015),
                            IsDeleted = false,
                            IsPersonel = false,
                            PlateName = "34 PLK 45"
                        },
                        new
                        {
                            Id = 5,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 408, DateTimeKind.Local).AddTicks(3016),
                            IsDeleted = false,
                            IsPersonel = false,
                            PlateName = "69 AS 89"
                        });
                });

            modelBuilder.Entity("Security.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Security.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Security.Domain.Entities.Personel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatabaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Personels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec90e142-3bbf-4433-91ed-c80b6aa7ffa1",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ac75fea-96a3-41bf-88a8-70c43876dc99",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1b12da6-dea2-4705-8bea-8e469e72762a",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78068992-96bb-4508-8c77-16fc1afefd16",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "394a923a-dcf6-44dd-aa9e-9d442a7ee5f4",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = true,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1f448e56-c23c-4500-8f26-123db0be28fa",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5e876096-746b-4b3d-895c-261be11ecedd",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "decbeb94-8f26-410b-99fc-c3a78d207488",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f844e5a2-22ce-49f9-81c7-405478c29699",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = false,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9ad527d-77f2-4c9f-8dec-5e6e880761eb",
                            EmailConfirmed = false,
                            FirstName = "Derya",
                            IsDeleted = true,
                            LastName = "Yorulmaz",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Security.Domain.Entities.PersonelEntities.PersonelChartOfAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int");

                    b.Property<string>("PersonelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PersonelChartOfAccounts", (string)null);
                });

            modelBuilder.Entity("Security.Domain.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            IsDeleted = false,
                            UnitName = "Satın Alma Büro Amirliği"
                        },
                        new
                        {
                            Id = 2,
                            BranchId = 1,
                            IsDeleted = false,
                            UnitName = "Tahakkuk Büro Amirliği"
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 2,
                            IsDeleted = false,
                            UnitName = "Atış Büro Amirliği"
                        },
                        new
                        {
                            Id = 4,
                            BranchId = 3,
                            IsDeleted = false,
                            UnitName = "Personel Kayıt Amirliği"
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 4,
                            IsDeleted = false,
                            UnitName = "Öğrenci Özlük Amirliği"
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 6,
                            IsDeleted = false,
                            UnitName = "Belge Yönetimi Amirliği"
                        });
                });

            modelBuilder.Entity("Security.Domain.Entities.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CarPlateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("JobInterview")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonelId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<bool>("Visit")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PersonelId");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BranchId = 1,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(2779),
                            FirstName = "Tanyeli",
                            IdentityNumber = "197612153960",
                            IsDeleted = false,
                            JobInterview = true,
                            LastName = "Gümüşpala",
                            PersonelId = 1,
                            Visit = false
                        },
                        new
                        {
                            Id = 2,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4137),
                            FirstName = "Tanyeli",
                            IdentityNumber = "197612153960",
                            IsDeleted = false,
                            JobInterview = true,
                            LastName = "Gümüşpala",
                            PersonelId = 1,
                            ReleaseDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4142),
                            UnitId = 2,
                            Visit = false
                        },
                        new
                        {
                            Id = 3,
                            BranchId = 3,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4144),
                            FirstName = "Tanyeli",
                            IdentityNumber = "197612153960",
                            IsDeleted = true,
                            JobInterview = true,
                            LastName = "Gümüşpala",
                            PersonelId = 1,
                            Visit = false
                        },
                        new
                        {
                            Id = 4,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4146),
                            FirstName = "Tanyeli",
                            IdentityNumber = "197612153960",
                            IsDeleted = false,
                            JobInterview = true,
                            LastName = "Gümüşpala",
                            PersonelId = 1,
                            ReleaseDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4148),
                            UnitId = 4,
                            Visit = false
                        },
                        new
                        {
                            Id = 5,
                            BranchId = 2,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4149),
                            FirstName = "Tanyeli",
                            IdentityNumber = "197612153960",
                            IsDeleted = false,
                            JobInterview = true,
                            LastName = "Gümüşpala",
                            PersonelId = 1,
                            ReleaseDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4151),
                            Visit = false
                        },
                        new
                        {
                            Id = 6,
                            BranchId = 5,
                            EntryDate = new DateTime(2024, 5, 7, 16, 35, 37, 412, DateTimeKind.Local).AddTicks(4151),
                            FirstName = "Tanyeli",
                            IdentityNumber = "197612153960",
                            IsDeleted = true,
                            JobInterview = true,
                            LastName = "Gümüşpala",
                            PersonelId = 1,
                            Visit = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Security.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Security.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Security.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Security.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Security.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonelUnit", b =>
                {
                    b.HasOne("Security.Domain.Entities.Personel", null)
                        .WithMany()
                        .HasForeignKey("PersonelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security.Domain.Entities.Unit", null)
                        .WithMany()
                        .HasForeignKey("unitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Security.Domain.Entities.BranchAndUnitRelationShip", b =>
                {
                    b.HasOne("Security.Domain.Entities.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Security.Domain.Entities.Personel", "Personel")
                        .WithMany()
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Security.Domain.Entities.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.Navigation("Branch");

                    b.Navigation("Personel");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Security.Domain.Entities.Unit", b =>
                {
                    b.HasOne("Security.Domain.Entities.Branch", "Branch")
                        .WithMany("Units")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Security.Domain.Entities.Visitor", b =>
                {
                    b.HasOne("Security.Domain.Entities.Personel", "Personel")
                        .WithMany()
                        .HasForeignKey("PersonelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Security.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Units");
                });
#pragma warning restore 612, 618
        }
    }
}
